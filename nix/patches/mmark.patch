diff --git a/Text/MMark/Parser.hs b/Text/MMark/Parser.hs
index 6e03730..83bafee 100644
--- a/Text/MMark/Parser.hs
+++ b/Text/MMark/Parser.hs
@@ -439,9 +439,8 @@ pReferenceDef = do
       (Just True,  Nothing) -> return ()
       _                     -> hidden eof <|> eol
     conflict <- registerReference dlabel (uri, mtitle)
-    when conflict $ do
-      setOffset o
-      customFailure (DuplicateReferenceDefinition dlabel)
+    when conflict $
+      customFailure' o (DuplicateReferenceDefinition dlabel)
     Nothing <$ sc
   where
     recover err =
@@ -782,20 +781,15 @@ pLocation innerOffset inner = do
     withRef =
       pRefLabel >>= uncurry lookupRef
     collapsed o inlines = do
-      -- NOTE We need to do these manipulations so the failure caused by
-      -- @'string' "[]"@ does not overwrite our custom failures.
-      o' <- getOffset
-      setOffset o
-      (void . hidden . string) "[]"
-      setOffset (o' + 2)
+      region (setErrorOffset o) $
+        (void . hidden . string) "[]"
       lookupRef o (mkLabel inlines)
     shortcut o inlines =
       lookupRef o (mkLabel inlines)
     lookupRef o dlabel =
       lookupReference dlabel >>= \case
-        Left names -> do
-          setOffset o
-          customFailure (CouldNotFindReferenceDefinition dlabel names)
+        Left names ->
+          customFailure' o (CouldNotFindReferenceDefinition dlabel names)
         Right x ->
           return x
     mkLabel = T.unwords . T.words . asPlainText
@@ -863,9 +857,8 @@ pLfdr = try $ do
     , r (SingleFrame SubscriptFrame)
     , r (SingleFrame SuperscriptFrame) ]
   let dels = inlineStateDel st
-      failNow = do
-        setOffset o
-        (customFailure . NonFlankingDelimiterRun . toNesTokens) dels
+      failNow =
+        customFailure' o (NonFlankingDelimiterRun (toNesTokens dels))
   lch <- getLastChar
   rch <- getNextChar OtherChar
   when (lch >= rch) failNow
@@ -882,9 +875,8 @@ pRfdr frame = try $ do
         other -> other
   o <- getOffset
   (void . expectingInlineContent . string) dels
-  let failNow = do
-        setOffset o
-        (customFailure . NonFlankingDelimiterRun . toNesTokens) dels
+  let failNow =
+        customFailure' o (NonFlankingDelimiterRun (toNesTokens dels))
   lch <- getLastChar
   rch <- getNextChar SpaceChar
   when (lch <= rch) failNow
@@ -974,9 +966,8 @@ entityRef = do
   name <- try . region f $ between (char '&') (char ';')
     (takeWhile1P Nothing Char.isAlphaNum <?> "HTML5 entity name")
   case HM.lookup name htmlEntityMap of
-    Nothing -> do
-      setOffset o
-      customFailure (UnknownHtmlEntityName name)
+    Nothing ->
+      customFailure' o (UnknownHtmlEntityName name)
     Just txt -> return (T.unpack txt)
 
 -- | Parse a numeric character using the given numeric parser.
@@ -987,9 +978,7 @@ numRef = do
   let f = between (string "&#") (char ';')
   n   <- try (f (char' 'x' *> L.hexadecimal)) <|> f L.decimal
   if n == 0 || n > fromEnum (maxBound :: Char)
-    then do
-      setOffset o
-      customFailure (InvalidNumericCharacter n)
+    then customFailure' o (InvalidNumericCharacter n)
     else return (Char.chr n)
 
 sc :: MonadParsec e Text m => m ()
@@ -1248,3 +1237,15 @@ fromRight _         =
 
 bakeText :: (String -> String) -> Text
 bakeText = T.pack . reverse . ($ [])
+
+-- | Report custom failure at specified location.
+
+customFailure'
+  :: MonadParsec MMarkErr Text m
+  => Int
+  -> MMarkErr
+  -> m a
+customFailure' o e =
+  parseError $ FancyError
+    o
+    (E.singleton (ErrorCustom e))
diff --git a/Text/MMark/Parser/Internal.hs b/Text/MMark/Parser/Internal.hs
index abe8aaa..bb3dc12 100644
--- a/Text/MMark/Parser/Internal.hs
+++ b/Text/MMark/Parser/Internal.hs
@@ -239,7 +239,7 @@ mkInitialState
   :: FilePath          -- ^ File name to use
   -> Text              -- ^ Input
   -> Int               -- ^ Starting offset
-  -> M.State Text
+  -> M.State Text e
 mkInitialState file input offset = M.State
   { stateInput = input
   , stateOffset = offset
@@ -250,6 +250,7 @@ mkInitialState file input offset = M.State
     , pstateTabWidth = mkPos 4
     , pstateLinePrefix = ""
     }
+  , stateParseErrors = []
   }
 
 -- | Locally change state in a state monad and then restore it back.
